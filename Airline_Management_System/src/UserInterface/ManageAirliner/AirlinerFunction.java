/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageAirliner;

import Business.Airliner;
import Business.AirlinerDirectory;
import Business.Airplane;
import Business.AirplaneDirectory;
import Business.Flight;
import Business.FlightSchedule;
import Business.MasterTravelSchedule;
import Business.ReservationDirectory;
import UserInterface.ManageTravelAgency.ManageTravelAgency;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mayank
 */
public class AirlinerFunction extends javax.swing.JPanel {
    
    private AirlinerDirectory airlineDirectory;
    private AirplaneDirectory airplaneDirectory;
    private JPanel panel;
    private Airliner airliner;
    private MasterTravelSchedule masterTravelSchedule;
    private ReservationDirectory reservationDirectory;
    
    /**
     * Creates new form AirlinerFunction
     */
    public AirlinerFunction(JPanel panel, AirlinerDirectory airlineDirectory, AirplaneDirectory airplaneDirectory, Airliner airliner, MasterTravelSchedule masterTravelSchedule, ReservationDirectory reservationDirectory) {
        initComponents();
        this.panel = panel;
        this.airlineDirectory = airlineDirectory;
        this.airplaneDirectory = airplaneDirectory;
        this.airliner = airliner;
        this.masterTravelSchedule = masterTravelSchedule;
        this.reservationDirectory = reservationDirectory;
        populateAirlineFlights();
    }
    
    public void populateAirlineFlights() {
        DefaultTableModel dtm = (DefaultTableModel)airlinerFlightTbl.getModel();
        dtm.setRowCount(0);
        for(Flight f : airliner.getFlightList()){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]= f;
            row[1]= f.getFlightName();
            row[2]= f.getAirliner();
            row[3]= f.getAirplane();
            row[4]= f.getFlightSchedule().getSource();
            row[5]= f.getFlightSchedule().getDestination();
            row[6]= f.getFlightSchedule().getDepartureDate() + "; " + f.getFlightSchedule().getDepartureTime();
            row[7]= f.getFlightSchedule().getArrivalDate() + "; " + f.getFlightSchedule().getArrivalTime();
            row[8]= (f.isIsActive()? "Active" : "Cancelled");
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageAirplaneBtn = new javax.swing.JButton();
        addFlightBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        airlinerFlightTbl = new javax.swing.JTable();
        manageflightScheduleBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        updateFlightBtn = new javax.swing.JButton();
        backFlightList = new javax.swing.JButton();

        setBackground(new java.awt.Color(174, 195, 195));
        setPreferredSize(new java.awt.Dimension(1040, 1020));
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        manageAirplaneBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-paper-plane-60.png"))); // NOI18N
        manageAirplaneBtn.setText("Manage Airplanes");
        manageAirplaneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageAirplaneBtnActionPerformed(evt);
            }
        });

        addFlightBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/travel (1).png"))); // NOI18N
        addFlightBtn.setText(" Add Flight");
        addFlightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFlightBtnActionPerformed(evt);
            }
        });

        airlinerFlightTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Flight Id", "Flight #", "Airline", "Airplane", "Source", "Destination", "Departure Date & Time", "Arrival Date & Time", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        airlinerFlightTbl.setRowHeight(25);
        airlinerFlightTbl.setRowMargin(3);
        airlinerFlightTbl.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(airlinerFlightTbl);
        if (airlinerFlightTbl.getColumnModel().getColumnCount() > 0) {
            airlinerFlightTbl.getColumnModel().getColumn(0).setResizable(false);
            airlinerFlightTbl.getColumnModel().getColumn(1).setResizable(false);
            airlinerFlightTbl.getColumnModel().getColumn(2).setResizable(false);
            airlinerFlightTbl.getColumnModel().getColumn(3).setResizable(false);
            airlinerFlightTbl.getColumnModel().getColumn(4).setResizable(false);
            airlinerFlightTbl.getColumnModel().getColumn(5).setResizable(false);
            airlinerFlightTbl.getColumnModel().getColumn(6).setResizable(false);
            airlinerFlightTbl.getColumnModel().getColumn(7).setResizable(false);
            airlinerFlightTbl.getColumnModel().getColumn(8).setResizable(false);
        }

        manageflightScheduleBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-schedule-60.png"))); // NOI18N
        manageflightScheduleBtn.setText("Manage Flight Schedule");
        manageflightScheduleBtn.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        manageflightScheduleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageflightScheduleBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        jLabel1.setText("Flights List");

        updateFlightBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/change.png"))); // NOI18N
        updateFlightBtn.setText(" Update Flight");
        updateFlightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFlightBtnActionPerformed(evt);
            }
        });

        backFlightList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-back-30.png"))); // NOI18N
        backFlightList.setText("Back");
        backFlightList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFlightListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1016, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backFlightList)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(manageAirplaneBtn)
                                .addGap(18, 18, 18)
                                .addComponent(manageflightScheduleBtn)
                                .addGap(18, 18, 18)
                                .addComponent(addFlightBtn)
                                .addGap(18, 18, 18)
                                .addComponent(updateFlightBtn)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(420, 420, 420)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backFlightList)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateFlightBtn)
                    .addComponent(addFlightBtn)
                    .addComponent(manageflightScheduleBtn)
                    .addComponent(manageAirplaneBtn))
                .addContainerGap(472, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void manageAirplaneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageAirplaneBtnActionPerformed
        ManageAirplanes createAirplanePanel = new ManageAirplanes(this.panel,  airlineDirectory,  airplaneDirectory,  airliner,  masterTravelSchedule);
        this.panel.add(createAirplanePanel, "CreateAirplane");
        CardLayout layout = (CardLayout)this.panel.getLayout();
        layout.next(panel);
    }//GEN-LAST:event_manageAirplaneBtnActionPerformed

    private void addFlightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFlightBtnActionPerformed
        boolean isActiveAirplane = false;
        boolean isActiveFS = false;
        for(Airplane a : airliner.getAirplaneList()) {
            if(a.isIsActive()) {
                isActiveAirplane = true;
                break;
            }
        }
        for(FlightSchedule fs : airliner.getFlightScheduleList()) {
            if(fs.isIsActive()) {
                isActiveFS = true;
                break;
            }
        }
        
        if(isActiveFS && isActiveFS) {
            CreateFlight createFlightPanel = new CreateFlight(this.panel, airlineDirectory, airplaneDirectory, airliner, masterTravelSchedule);
            this.panel.add(createFlightPanel, "CreateFlight");
            CardLayout layout = (CardLayout)this.panel.getLayout();
            layout.next(panel);
        }else {
            JOptionPane.showMessageDialog(null, "Please add atleast one active Airplane and active Flight Schedule to add or update flight");
        }
        
        /*
        if(airliner.getAirplaneList().isEmpty() || airliner.getFlightScheduleList().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please add atleast one active Airplane and active Flight Schedule to add or update flight");
        }else {
            CreateFlight createFlightPanel = new CreateFlight(this.panel, airlineDirectory, airplaneDirectory, airliner, masterTravelSchedule);
            this.panel.add(createFlightPanel, "CreateFlight");
            CardLayout layout = (CardLayout)this.panel.getLayout();
            layout.next(panel);
        }
        */
    }//GEN-LAST:event_addFlightBtnActionPerformed

    private void manageflightScheduleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageflightScheduleBtnActionPerformed
        ManageFlightSchedules flightSchedulePanel = new ManageFlightSchedules(this.panel,  airlineDirectory,  airplaneDirectory,  airliner, masterTravelSchedule);
        this.panel.add(flightSchedulePanel, "FlightSchedule");
        CardLayout layout = (CardLayout)this.panel.getLayout();
        layout.next(panel);
    }//GEN-LAST:event_manageflightScheduleBtnActionPerformed

    private void updateFlightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFlightBtnActionPerformed
        if(airliner.getAirplaneList().isEmpty() || airliner.getFlightScheduleList().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please add atleast one Airplane and FLight Schedule to add or update flight");
        }else {
            int selectedRow = airlinerFlightTbl.getSelectedRow();
            if(selectedRow>=0){
                Flight flight = (Flight)airlinerFlightTbl.getValueAt(selectedRow, 0);

                UpdateFlight updateflightPanel = new UpdateFlight(this.panel, airlineDirectory, airplaneDirectory, airliner, flight, masterTravelSchedule, reservationDirectory);
                this.panel.add(updateflightPanel, "UpdateFlight");
                CardLayout layout = (CardLayout)this.panel.getLayout();
                layout.next(panel);
            }else{
                JOptionPane.showMessageDialog(null, "Please select a Flight to update");
            }
        }
    }//GEN-LAST:event_updateFlightBtnActionPerformed

    private void backFlightListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFlightListActionPerformed
        // TODO add your handling code here:
//        ManageAirliners manageAirliners = new ManageAirliners(this.panel,  airlineDirectory,  airplaneDirectory,  masterTravelSchedule);
//        this.panel.add(manageAirliners, "ManageAirliners");
//        CardLayout layout = (CardLayout)this.panel.getLayout();
//        layout.next(panel);
//        this.panel.remove(this);
//        CardLayout layout = (CardLayout) this.panel.getLayout();
//        layout.previous(panel);
          
        this.panel.remove(this);
        CardLayout layout = (CardLayout)this.panel.getLayout();
        Component[] comps = this.panel.getComponents();
        for (Component comp : comps){
            if(comp instanceof ManageAirliners){
                ManageAirliners rePopulateTable = (ManageAirliners) comp;
                //rePopulateTable.populate();
            }
        }
        layout.previous(panel);

    }//GEN-LAST:event_backFlightListActionPerformed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
       
    }//GEN-LAST:event_formAncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFlightBtn;
    private javax.swing.JTable airlinerFlightTbl;
    private javax.swing.JButton backFlightList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton manageAirplaneBtn;
    private javax.swing.JButton manageflightScheduleBtn;
    private javax.swing.JButton updateFlightBtn;
    // End of variables declaration//GEN-END:variables
}
