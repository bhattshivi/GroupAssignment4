/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageAirliner;

import Business.Airliner;
import Business.FlightSchedule;
import Business.AirlinerDirectory;
import Business.AirplaneDirectory;
import Business.Flight;
import Business.MasterTravelSchedule;
import java.awt.CardLayout;
import java.awt.Component;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Mayank
 */
public class UpdateFlightSchedule extends javax.swing.JPanel {
    private AirlinerDirectory airlineDirectory;
    private AirplaneDirectory airplaneDirectory;
    private JPanel panel;
    private Airliner airliner;
    private FlightSchedule flightSchedule;
    private MasterTravelSchedule masterTravelSchedule;
    /**
     * Creates new form CreateFlightSchedule
     */
    public UpdateFlightSchedule(JPanel panel, AirlinerDirectory airlineDirectory, AirplaneDirectory airplaneDirectory, Airliner airliner, FlightSchedule flightSchedule,MasterTravelSchedule masterTravelSchedule) {
        initComponents();
        this.airliner = airliner;
        this.panel = panel;
        this.airlineDirectory = airlineDirectory;
        this.airplaneDirectory = airplaneDirectory;
        this.flightSchedule = flightSchedule;
        this.masterTravelSchedule= masterTravelSchedule;
        populateFlightScheduleDetails();
    }
    
    public void populateFlightScheduleDetails() {
        
        sourceCombo.setSelectedItem(flightSchedule.getSource());
        destinationCombo.setSelectedItem(flightSchedule.getDestination());
        
        dDateTimePicker.datePicker.setDate(flightSchedule.getDepartureDate());
        dDateTimePicker.timePicker.setTime(flightSchedule.getDepartureTime());
        aDateTimePicker.datePicker.setDate(flightSchedule.getArrivalDate());
        aDateTimePicker.timePicker.setTime(flightSchedule.getArrivalTime());

        fsStatus.setSelectedItem(flightSchedule.isIsActive() ? "Active" : "Inactive");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        updateFlight = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        sourceCombo = new javax.swing.JComboBox<>();
        destinationCombo = new javax.swing.JComboBox<>();
        backUpdateFS = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        fsStatus = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        dDateTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();
        jLabel14 = new javax.swing.JLabel();
        aDateTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();

        setBackground(new java.awt.Color(174, 195, 195));
        setPreferredSize(new java.awt.Dimension(1040, 1020));

        jLabel1.setText("Source *");

        jLabel2.setText("Destination *");

        updateFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/change.png"))); // NOI18N
        updateFlight.setText("Update");
        updateFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFlightActionPerformed(evt);
            }
        });

        jLabel7.setText("Update Flight Schedule");
        jLabel7.setFont(new java.awt.Font("Segoe Script", 1, 36)); // NOI18N

        sourceCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Boston", "San Francisco", "Dallas", "San Jose", "Seattle", "New York", "Las Vegas", "Los Angeles", "Chicago", "Miami" }));

        destinationCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Boston", "San Francisco", "Dallas", "San Jose", "Seattle", "New York", "Las Vegas", "Los Angeles", "Chicago", "Miami" }));

        backUpdateFS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-back-30.png"))); // NOI18N
        backUpdateFS.setText("Back");
        backUpdateFS.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                backUpdateFSAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        backUpdateFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backUpdateFSActionPerformed(evt);
            }
        });

        jLabel12.setText("Status *");

        fsStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Active", "Inactive" }));

        jLabel13.setText("Departure Date & Time *");

        jLabel14.setText("Departure Date & Time *");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(287, 287, 287)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(303, 303, 303)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dDateTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sourceCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(destinationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel12))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(aDateTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fsStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backUpdateFS))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(399, 399, 399)
                        .addComponent(updateFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(301, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backUpdateFS)
                .addGap(23, 23, 23)
                .addComponent(jLabel7)
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sourceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(destinationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(dDateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(aDateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fsStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(75, 75, 75)
                .addComponent(updateFlight)
                .addContainerGap(495, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFlightActionPerformed
        
        //FlightSchedule flightSchedule = new FlightSchedule();
        /*
        flightSchedule.setSource(source.getText());
        flightSchedule.setDestination(destination.getText());
        flightSchedule.setDepartureDate(LocalDate.parse(departureDate.getText()));
        flightSchedule.setArrivalDate(LocalDate.parse(arrivalDate.getText()));
        flightSchedule.setDepartureTime(LocalTime.parse(departureTime.getText()));
        flightSchedule.setArrivalTime(LocalTime.parse(arrivalTime.getText()));
        */
        //airliner.addFlightSchedule(flightSchedule);
        
        if("-- None --".equals(sourceCombo.getSelectedItem())) {
            JOptionPane.showMessageDialog(null, "Source city is mandatory");
            
        }else if("-- None --".equals(destinationCombo.getSelectedItem())) {
            JOptionPane.showMessageDialog(null, "Destination city is mandatory");
            
        }else if(sourceCombo.getSelectedItem().equals(destinationCombo.getSelectedItem())) {
            JOptionPane.showMessageDialog(null, "Source and destination city cannot be same");
            
        }
        
        
        else if("".equals(dDateTimePicker.datePicker.getText()) || "".equals(dDateTimePicker.timePicker.getText())) {
            JOptionPane.showMessageDialog(null, "Departure date and time is mandatory");
            
        }
        else if("".equals(aDateTimePicker.datePicker.getText()) || "".equals(aDateTimePicker.timePicker.getText())) {
            JOptionPane.showMessageDialog(null, "Arrival date and time is mandatory");
            
        }
        
        /*else if("".equals(departureDate.getText())) {
            JOptionPane.showMessageDialog(null, "Departure date is mandatory");
            
        }else if("".equals(arrivalDate.getText())) {
            JOptionPane.showMessageDialog(null, "Arrival date is mandatory");
            
        }else if("".equals(departureTime.getText())) {
            JOptionPane.showMessageDialog(null, "Departure time is mandatory");
            
        }else if("".equals(arrivalTime.getText())) {
            JOptionPane.showMessageDialog(null, "Arrival time is mandatory");
            
        }*/ else if("-- None --".equals(fsStatus.getSelectedItem())) {
            JOptionPane.showMessageDialog(null, "Flight Schedule status is mandatory");
            
        }
        
             
        else {       
            /*
            LocalDate dDate;
            LocalDate aDate;
            LocalTime dTime;
            LocalTime aTime;
            
            try{
                dDate = LocalDate.parse(departureDate.getText());
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Departure date in YYYY-MM-DD format");
                return;
            } 
            
            try{
                aDate = LocalDate.parse(arrivalDate.getText());
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Arrival date in YYYY-MM-DD format");
                return;
            } 
             
            try{
                dTime = LocalTime.parse(departureTime.getText());
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Departure time in HH:MM format");
                return;
            }
            
            try{
                aTime = LocalTime.parse(arrivalTime.getText());
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Arrival time in HH:MM format");
                return;
            } 
               */     
            
            boolean updateFS = true;
            for(Flight f : airliner.getFlightList()) {
                if(f.getFlightSchedule().getFlightScheduleId().equals(flightSchedule.getFlightScheduleId()) && f.isIsActive() && fsStatus.getSelectedItem().toString() == "Inactive") {
                    updateFS = false;
                    JOptionPane.showMessageDialog(null, "Flight number " + f.getFlightName() + " is already contain this schedule and is active. Please cancel the flight first to inactive the flight schedule");
                    break;
                }
            }
            
            if(updateFS == true) {
                flightSchedule.setSource(sourceCombo.getSelectedItem().toString());
                flightSchedule.setDestination(destinationCombo.getSelectedItem().toString());

                flightSchedule.setDepartureDate(dDateTimePicker.datePicker.getDate());
                flightSchedule.setArrivalDate(aDateTimePicker.datePicker.getDate());
                flightSchedule.setDepartureTime(dDateTimePicker.timePicker.getTime());
                flightSchedule.setArrivalTime(aDateTimePicker.timePicker.getTime());
                flightSchedule.setIsActive(fsStatus.getSelectedItem().toString() == "Active");
            
                JOptionPane.showMessageDialog(null, "Flight schedule is updated successfully");
            }
            
                
            /*flightSchedule.setDepartureDate(LocalDate.parse(departureDate.getText()));
            flightSchedule.setArrivalDate(LocalDate.parse(arrivalDate.getText()));
            flightSchedule.setDepartureTime(LocalTime.parse(departureTime.getText()));
            flightSchedule.setArrivalTime(LocalTime.parse(arrivalTime.getText()));*/
            //flightSchedule.setIsActive((Boolean)fsStatus.getSelectedItem());
            
        }
        
    }//GEN-LAST:event_updateFlightActionPerformed

    private void backUpdateFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backUpdateFSActionPerformed
        // TODO add your handling code here:
//        ManageFlightSchedules flightSchedulePanel = new ManageFlightSchedules(this.panel, airlineDirectory, airplaneDirectory, airliner,masterTravelSchedule);
//        this.panel.add(flightSchedulePanel, "FlightSchedule");
//        CardLayout layout = (CardLayout)this.panel.getLayout();
//        layout.next(panel);
         this.panel.remove(this);
        CardLayout layout = (CardLayout)this.panel.getLayout();
        Component[] comps = this.panel.getComponents();
        for (Component comp : comps){
            if(comp instanceof ManageFlightSchedules){
                ManageFlightSchedules rePopulateTable = (ManageFlightSchedules) comp;
                rePopulateTable.populateFlightSchedules();
            }
        }
        layout.previous(panel);
    }//GEN-LAST:event_backUpdateFSActionPerformed

    private void backUpdateFSAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_backUpdateFSAncestorAdded
        // TODO add your handling code here:
      
    }//GEN-LAST:event_backUpdateFSAncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DateTimePicker aDateTimePicker;
    private javax.swing.JButton backUpdateFS;
    private com.github.lgooddatepicker.components.DateTimePicker dDateTimePicker;
    private javax.swing.JComboBox<String> destinationCombo;
    private javax.swing.JComboBox<String> fsStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox<String> sourceCombo;
    private javax.swing.JButton updateFlight;
    // End of variables declaration//GEN-END:variables
}
