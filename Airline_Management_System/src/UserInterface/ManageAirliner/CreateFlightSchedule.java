/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageAirliner;

import Business.Airliner;
import Business.FlightSchedule;
import Business.AirlinerDirectory;
import Business.Airplane;
import Business.AirplaneDirectory;
import Business.MasterTravelSchedule;
import java.awt.CardLayout;
import java.awt.Component;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Mayank
 */
public class CreateFlightSchedule extends javax.swing.JPanel {
    private AirlinerDirectory airlineDirectory;
    private AirplaneDirectory airplaneDirectory;
    private JPanel panel;
    private Airliner airliner;
    private MasterTravelSchedule masterTravelSchedule;
    /**
     * Creates new form CreateFlightSchedule
     */
    public CreateFlightSchedule(JPanel panel, AirlinerDirectory airlineDirectory, AirplaneDirectory airplaneDirectory, Airliner airliner,MasterTravelSchedule masterTravelSchedule) {
        initComponents();
        this.airliner = airliner;
        this.panel = panel;
        this.airlineDirectory = airlineDirectory;
        this.airplaneDirectory = airplaneDirectory;
        this.masterTravelSchedule = masterTravelSchedule;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        createFlight = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        sourceCombo = new javax.swing.JComboBox<>();
        destinationCombo = new javax.swing.JComboBox<>();
        backCreateFlightSchedule = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        fsStatus = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        dDateTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();
        jLabel14 = new javax.swing.JLabel();
        aDateTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();

        setBackground(new java.awt.Color(174, 195, 195));
        setPreferredSize(new java.awt.Dimension(1040, 1020));
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel1.setText("Source *");

        jLabel2.setText("Destination *");

        createFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-schedule-60.png"))); // NOI18N
        createFlight.setText("Create");
        createFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createFlightActionPerformed(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Create Flight Schedule");
        jLabel7.setFont(new java.awt.Font("Segoe Script", 1, 36)); // NOI18N

        sourceCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Boston", "San Francisco", "Dallas", "San Jose", "Seattle", "New York", "Las Vegas", "Los Angeles", "Chicago", "Miami" }));

        destinationCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Boston", "San Francisco", "Dallas", "San Jose", "Seattle", "New York", "Las Vegas", "Los Angeles", "Chicago", "Miami" }));
        destinationCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationComboActionPerformed(evt);
            }
        });

        backCreateFlightSchedule.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-back-30.png"))); // NOI18N
        backCreateFlightSchedule.setText("Back");
        backCreateFlightSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backCreateFlightScheduleActionPerformed(evt);
            }
        });

        jLabel12.setText("Status *");

        fsStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Active", "Inactive" }));

        jLabel13.setText("Departure Date & Time *");

        jLabel14.setText("Departure Date & Time *");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(backCreateFlightSchedule)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(314, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel13)
                                    .addGap(30, 30, 30)
                                    .addComponent(dDateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel12))
                                        .addGap(30, 30, 30)
                                        .addComponent(fsStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(175, 175, 175)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(sourceCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(aDateTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(destinationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(287, 287, 287))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(createFlight)
                        .addGap(449, 449, 449))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backCreateFlightSchedule)
                .addGap(36, 36, 36)
                .addComponent(jLabel7)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(destinationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(dDateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(aDateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(fsStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(createFlight)
                .addContainerGap(509, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public boolean checkForExistingFlightSchedules() {
        boolean isFSExists = false;
        for(FlightSchedule fs : airliner.getFlightScheduleList()) {
            if(fs.getSource().equals(sourceCombo.getSelectedItem()) &&
                fs.getDestination().equals(destinationCombo.getSelectedItem()) &&
                fs.getDepartureDate().equals(dDateTimePicker.datePicker.getDate()) &&
                fs.getArrivalDate().equals(aDateTimePicker.datePicker.getDate()) &&
                fs.getDepartureTime().equals(dDateTimePicker.timePicker.getTime()) &&    
                fs.getArrivalTime().equals(aDateTimePicker.timePicker.getTime())                    
                ) {
                isFSExists = true;
                JOptionPane.showMessageDialog(null, "A flight schedule " + fs.getFlightScheduleId() + " already exists with the same details.");
                break;
            }
        }
        return isFSExists;
    }
    
    private void createFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createFlightActionPerformed
        
        /*FlightSchedule flightSchedule = new FlightSchedule();
        
        flightSchedule.setSource(source.getText());
        flightSchedule.setDestination(destination.getText());
        flightSchedule.setDepartureDate(LocalDate.parse(departureDate.getText()));
        flightSchedule.setArrivalDate(LocalDate.parse(arrivalDate.getText()));
        flightSchedule.setDepartureTime(LocalTime.parse(departureTime.getText()));
        flightSchedule.setArrivalTime(LocalTime.parse(arrivalTime.getText()));
        
        airliner.addFlightSchedule(flightSchedule);     */        
        
        if("-- None --".equals(sourceCombo.getSelectedItem())) {
            JOptionPane.showMessageDialog(null, "Source city is mandatory");
            
        }else if("-- None --".equals(destinationCombo.getSelectedItem())) {
            JOptionPane.showMessageDialog(null, "Destination city is mandatory");
            
        }else if(sourceCombo.getSelectedItem().equals(destinationCombo.getSelectedItem())) {
            JOptionPane.showMessageDialog(null, "Source and destination city cannot be same");
            
        }
        else if("".equals(dDateTimePicker.datePicker.getText()) || "".equals(dDateTimePicker.timePicker.getText())) {
            JOptionPane.showMessageDialog(null, "Departure date and time is mandatory");
            
        }
        else if("".equals(aDateTimePicker.datePicker.getText()) || "".equals(aDateTimePicker.timePicker.getText())) {
            JOptionPane.showMessageDialog(null, "Arrival date and time is mandatory");
            
        }
        
        /*
        else if("".equals(departureDate.getText())) {
            JOptionPane.showMessageDialog(null, "Departure date is mandatory");
            
        }else if("".equals(arrivalDate.getText())) {
            JOptionPane.showMessageDialog(null, "Arrival date is mandatory");
            
        }else if("".equals(departureTime.getText())) {
            JOptionPane.showMessageDialog(null, "Departure time is mandatory");
            
        }else if("".equals(arrivalTime.getText())) {
            JOptionPane.showMessageDialog(null, "Arrival time is mandatory");
            
        }
        */
        
        else if("-- None --".equals(fsStatus.getSelectedItem())) {
            JOptionPane.showMessageDialog(null, "Flight Schedule status is mandatory");
            
        }else {            
            LocalDate dDate;
            LocalDate aDate;
            LocalTime dTime;
            LocalTime aTime;
            
            /*
            try{
                dDate = LocalDate.parse(departureDate.getText());
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Departure date in YYYY-MM-DD format");
                return;
            } 
            
            try{
                aDate = LocalDate.parse(arrivalDate.getText());
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Arrival date in YYYY-MM-DD format");
                return;
            } 
             
            try{
                dTime = LocalTime.parse(departureTime.getText());
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Departure time in HH:MM format");
                return;
            }
            
            try{
                aTime = LocalTime.parse(arrivalTime.getText());
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Arrival time in HH:MM format");
                return;
            } 
            */
            
            
            try{
                //dDate = LocalDate.parse(dDateTimePicker.datePicker.getText());
                dDate = dDateTimePicker.datePicker.getDate();
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Departure date in YYYY-MM-DD format");
                return;
            } 
            
            try{
                //aDate = LocalDate.parse(aDateTimePicker.datePicker.getText());
                aDate = aDateTimePicker.datePicker.getDate();
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Arrival date in YYYY-MM-DD format");
                return;
            } 
             
            try{
                //dTime = LocalTime.parse(dDateTimePicker.timePicker.getText());
                dTime = dDateTimePicker.timePicker.getTime();
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Departure time in HH:MM format");
                return;
            }
            
            try{
                //aTime = LocalTime.parse(aDateTimePicker.timePicker.getText());
                aTime = aDateTimePicker.timePicker.getTime();
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Arrival time in HH:MM format");
                return;
            } 
            
            
            if(dDate.isBefore(LocalDate.now())) {
                JOptionPane.showMessageDialog(null, "Departure Date can not be the past date");
            }else if(aDate.isBefore(LocalDate.now())) {
                JOptionPane.showMessageDialog(null, "Arrival Date can not be the past date");
            }else if(dDate.isAfter(aDate)) {
                JOptionPane.showMessageDialog(null, "Departure Date should not be greater than Arrival Date");
            }else if(dDate.equals(aDate) && dTime.isAfter(aTime)) {
                JOptionPane.showMessageDialog(null, "Departure Time should not be greater than Arrival Time");
            }else if(dDate.equals(aDate) && dTime.equals(aTime)) {
                JOptionPane.showMessageDialog(null, "Departure Time should not be same as Arrival Time");
            }else if(checkForExistingFlightSchedules()) {
                
            }else {
                FlightSchedule flightSchedule = new FlightSchedule();
        
                flightSchedule.setSource(sourceCombo.getSelectedItem().toString());
                flightSchedule.setDestination(destinationCombo.getSelectedItem().toString());
                
                flightSchedule.setDepartureDate(dDate);
                flightSchedule.setArrivalDate(aDate);
                flightSchedule.setDepartureTime(dTime);
                flightSchedule.setArrivalTime(aTime);
                /*
                flightSchedule.setDepartureDate(LocalDate.parse(departureDate.getText()));
                flightSchedule.setArrivalDate(LocalDate.parse(arrivalDate.getText()));
                flightSchedule.setDepartureTime(LocalTime.parse(departureTime.getText()));
                flightSchedule.setArrivalTime(LocalTime.parse(arrivalTime.getText()));
                */
                flightSchedule.setIsActive(fsStatus.getSelectedItem().toString() == "Active");
                
                airliner.addFlightSchedule(flightSchedule); 
                clearFields();
                JOptionPane.showMessageDialog(null, "Flight schedule is added successfully");
            }
        }
        
        /*
        else {
            
            if(isAirplaneExist == false) {
                
                int seatCols = 0;
                try {
                    seatCols = Integer.parseInt(airplaneCol.getText());
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "Please enter a valid seat column number");
                    return;
                }

                int seatRows = 0;
                try{
                    seatRows = Integer.parseInt(airplaneRows.getText());
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "Please enter a valid seat row number");
                    return;
                }

                Airplane newAirplane = new Airplane();
                
                newAirplane.setAirplaneName(airplaneName.getText());
                newAirplane.setSeatCol(seatCols);
                newAirplane.setSeatRow(seatRows);
                airliner.addAirplane(newAirplane);
                clearFields();
                JOptionPane.showMessageDialog(null, "Airplane Created Successfully"); 
            }
        }  */

    }//GEN-LAST:event_createFlightActionPerformed

    public void clearFields() {
        sourceCombo.setSelectedItem("-- None --");
        destinationCombo.setSelectedItem("-- None --");
        dDateTimePicker.datePicker.setText("");
        aDateTimePicker.datePicker.setText("");
        aDateTimePicker.timePicker.setText("");
        dDateTimePicker.timePicker.setText("");
        fsStatus.setSelectedItem("-- None --");
        fsStatus.setSelectedItem("-- None --");
    }
    
    private void backCreateFlightScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backCreateFlightScheduleActionPerformed
        // TODO add your handling code here:
//        ManageFlightSchedules flightSchedulePanel = new ManageFlightSchedules(this.panel, airlineDirectory, airplaneDirectory, airliner,masterTravelSchedule);
//        this.panel.add(flightSchedulePanel, "FlightSchedule");
//        CardLayout layout = (CardLayout)this.panel.getLayout();
//        layout.next(panel);
//        this.panel.remove(this);
//        CardLayout layout = (CardLayout) this.panel.getLayout();
//        layout.previous(panel);

         this.panel.remove(this);
        CardLayout layout = (CardLayout)this.panel.getLayout();
        Component[] comps = this.panel.getComponents();
        for (Component comp : comps){
            if(comp instanceof ManageFlightSchedules){
                ManageFlightSchedules rePopulateTable = (ManageFlightSchedules) comp;
                rePopulateTable.populateFlightSchedules();
            }
        }
        layout.previous(panel);
    }//GEN-LAST:event_backCreateFlightScheduleActionPerformed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_formAncestorAdded

    private void destinationComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destinationComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DateTimePicker aDateTimePicker;
    private javax.swing.JButton backCreateFlightSchedule;
    private javax.swing.JButton createFlight;
    private com.github.lgooddatepicker.components.DateTimePicker dDateTimePicker;
    private javax.swing.JComboBox<String> destinationCombo;
    private javax.swing.JComboBox<String> fsStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox<String> sourceCombo;
    // End of variables declaration//GEN-END:variables
}
