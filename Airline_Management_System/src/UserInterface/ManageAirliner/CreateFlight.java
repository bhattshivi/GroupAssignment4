/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageAirliner;

import Business.Airliner;
import Business.AirlinerDirectory;
import Business.FlightSchedule;
import Business.Airplane;
import Business.AirplaneDirectory;
import Business.Flight;
import Business.MasterTravelSchedule;
import Business.Seat;
import java.awt.CardLayout;
import java.awt.Component;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import static java.time.temporal.ChronoUnit.DAYS;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
/**
 *
 * @author Mayank
 */
public class CreateFlight extends javax.swing.JPanel {
    
    private AirlinerDirectory airlineDirectory;
    private AirplaneDirectory airplaneDirectory;
    private JPanel panel;
    DefaultTableModel dtm;
    private Airliner airliner;
    private FlightSchedule selectedFlightSchedule;
    private Airplane selectedAirplane;
    private MasterTravelSchedule masterTravelSchedule;
    /**
     * Creates new form CreateFlight
     */
    public CreateFlight(JPanel panel, AirlinerDirectory airlineDirectory, AirplaneDirectory airplaneDirectory, Airliner airliner, MasterTravelSchedule masterTravelSchedule) {
        initComponents();
        this.panel = panel;
        this.airlineDirectory = airlineDirectory;
        this.airplaneDirectory = airplaneDirectory;
        this.airliner = airliner;
        this.masterTravelSchedule = masterTravelSchedule;
        dtm = (DefaultTableModel) flightSeatsTbl.getModel();
        populateAirplanes();
        
    }
    
    public void populateAirplanes() {
        for(Airplane a : airliner.getAirplaneList()) {
            if(a.isIsActive()) {
                flightAirplaneCombo.addItem(a);
            }
        }        
        for(FlightSchedule s : airliner.getFlightScheduleList()) {
            if(s.isIsActive()) {
                flightScheduleCombo.addItem(s);
            }            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox4 = new javax.swing.JComboBox<>();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        flightNameTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        flightStatusCombo = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        flightAirplaneCombo = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        flightSeatsTbl = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        flightScheduleCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        sourceTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        departureDateTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        arrivalDateTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        arrivalTimeTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        departureTimeTxt = new javax.swing.JTextField();
        destiationTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        addFlightBtn = new javax.swing.JButton();
        btnBackAddFlight = new javax.swing.JButton();

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Economy", "Business" }));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Not Available" }));

        setBackground(new java.awt.Color(174, 195, 195));
        setPreferredSize(new java.awt.Dimension(1040, 1020));
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jPanel1.setBackground(new java.awt.Color(174, 195, 195));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Flight Details"));

        jLabel1.setText("Flight Name *");

        jLabel10.setText("Status *");

        flightStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Active", "Cancel" }));

        jLabel9.setText("Airplane *");

        flightAirplaneCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flightAirplaneComboActionPerformed(evt);
            }
        });

        jLabel12.setText("Add Seats");

        flightSeatsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seat # *", "Price *", "Type *", "Status *"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        flightSeatsTbl.setRowHeight(25);
        flightSeatsTbl.setRowMargin(3);
        flightSeatsTbl.setSelectionBackground(new java.awt.Color(228, 228, 228));
        flightSeatsTbl.setSelectionForeground(new java.awt.Color(51, 51, 51));
        flightSeatsTbl.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(flightSeatsTbl);
        if (flightSeatsTbl.getColumnModel().getColumnCount() > 0) {
            flightSeatsTbl.getColumnModel().getColumn(0).setResizable(false);
            flightSeatsTbl.getColumnModel().getColumn(1).setResizable(false);
            flightSeatsTbl.getColumnModel().getColumn(2).setResizable(false);
            flightSeatsTbl.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(jComboBox4));
            flightSeatsTbl.getColumnModel().getColumn(3).setResizable(false);
            flightSeatsTbl.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(jComboBox1));
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(jLabel12))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(flightNameTxt)
                            .addComponent(flightStatusCombo, 0, 211, Short.MAX_VALUE)
                            .addComponent(flightAirplaneCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(52, 52, 52))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(flightNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(flightStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(flightAirplaneCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(174, 195, 195));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Flight Schedule Details"));

        jLabel11.setText("Select Flight Schedule to add to this Flight *");

        flightScheduleCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flightScheduleComboActionPerformed(evt);
            }
        });

        jLabel2.setText("Source");

        sourceTxt.setEditable(false);

        jLabel3.setText("Destination");

        departureDateTxt.setEditable(false);

        jLabel4.setText("Arrival Date");

        arrivalDateTxt.setEditable(false);
        arrivalDateTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arrivalDateTxtActionPerformed(evt);
            }
        });

        jLabel5.setText("Arrival Time");

        arrivalTimeTxt.setEditable(false);

        jLabel7.setText("Destination Time");

        jLabel6.setText("Departure Date");

        departureTimeTxt.setEditable(false);
        departureTimeTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departureTimeTxtActionPerformed(evt);
            }
        });

        destiationTxt.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(flightScheduleCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(arrivalTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sourceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(arrivalDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(departureDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(55, 55, 55)
                                .addComponent(destiationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(departureTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(187, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(flightScheduleCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(sourceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(destiationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(arrivalDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(departureDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(arrivalTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(departureTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel13.setFont(new java.awt.Font("Segoe Script", 1, 36)); // NOI18N
        jLabel13.setText("Add Flight");

        addFlightBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-airplane-take-off-60.png"))); // NOI18N
        addFlightBtn.setText("Add Flight");
        addFlightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFlightBtnActionPerformed(evt);
            }
        });

        btnBackAddFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-back-30.png"))); // NOI18N
        btnBackAddFlight.setText("Back");
        btnBackAddFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackAddFlightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(406, 406, 406))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addFlightBtn)
                .addGap(441, 441, 441))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBackAddFlight)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBackAddFlight)
                .addGap(15, 15, 15)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(addFlightBtn)
                .addContainerGap(179, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public void clearFields() {
        flightNameTxt.setText("");
        flightStatusCombo.setSelectedItem("-- None --");
        dtm = (DefaultTableModel) flightSeatsTbl.getModel();
        int nRow = dtm.getRowCount();
        for(int i=0; i < nRow; i++) {                
            flightSeatsTbl.setValueAt(null, i, 0);
            flightSeatsTbl.setValueAt(null, i, 1);
            flightSeatsTbl.setValueAt(null, i, 2);
            flightSeatsTbl.setValueAt(null, i, 3);               
        }
    }
        
    private boolean checkForAirplaneOverlap() {
        
        boolean isOverlap = false;
        Flight oldF = new Flight();
        
        for(Flight f : airliner.getFlightList()) {
            if(f.getAirplane() == selectedAirplane) {                
                if(selectedFlightSchedule.getDepartureDate().isBefore(f.getFlightSchedule().getArrivalDate()) &&
                   f.getFlightSchedule().getDepartureDate().isBefore(selectedFlightSchedule.getArrivalDate())) {
                    isOverlap = true;
                    oldF = f;
                }else if((f.getFlightSchedule().getArrivalDate().equals(selectedFlightSchedule.getArrivalDate()) && 
                          f.getFlightSchedule().getDepartureDate().equals(selectedFlightSchedule.getDepartureDate())) ||
                        f.getFlightSchedule().getArrivalDate().equals(selectedFlightSchedule.getDepartureDate()) ||
                        f.getFlightSchedule().getDepartureDate().equals(selectedFlightSchedule.getArrivalDate())
                        ){                    
                    long diff1 = DAYS.between(selectedFlightSchedule.getDepartureDate(), selectedFlightSchedule.getArrivalDate());
                    long diff2 = DAYS.between(f.getFlightSchedule().getDepartureDate(), f.getFlightSchedule().getArrivalDate());
                    
                    if(diff2 > diff1) {
                        if(selectedFlightSchedule.getArrivalTime().isAfter(f.getFlightSchedule().getDepartureTime())) {
                            isOverlap = true;
                            oldF = f;
                        }
                    }
                    if(diff1 > diff2) {
                        if(f.getFlightSchedule().getArrivalTime().isAfter(selectedFlightSchedule.getDepartureTime())) {
                            isOverlap = true;
                            oldF = f;
                        }
                    }
                    if(diff1 == diff2) {
                        if(selectedFlightSchedule.getDepartureTime().isBefore(f.getFlightSchedule().getArrivalTime()) &&
                            f.getFlightSchedule().getDepartureTime().isBefore(selectedFlightSchedule.getArrivalTime())) {
                             isOverlap = true;
                             oldF = f;
                         }
                    }
                }
            }
        }
        
        if(isOverlap == true) {
            JOptionPane.showMessageDialog(null, "This airplane is already assigned on Flight " + oldF.getFlightName() + ". Please select a different airplane or modify the flght schedule");
        }
        
        return isOverlap;        
    }
    
    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
   
    }//GEN-LAST:event_formAncestorAdded

    private void btnBackAddFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackAddFlightActionPerformed
        // TODO add your handling code here:
        //        AirlinerFunction airLinerFunction = new AirlinerFunction(this.panel,  airlineDirectory,  airplaneDirectory,  airliner,  masterTravelSchedule);
        //        this.panel.add(airLinerFunction, "AirlinerFunction");
        //        CardLayout layout = (CardLayout)this.panel.getLayout();
        //        layout.next(panel);
        //        this.panel.remove(this);
        //        CardLayout layout = (CardLayout) this.panel.getLayout();
        //        layout.previous(panel);
        this.panel.remove(this);
        CardLayout layout = (CardLayout)this.panel.getLayout();
        Component[] comps = this.panel.getComponents();
        for (Component comp : comps){
            if(comp instanceof AirlinerFunction){
                AirlinerFunction rePopulateTable = (AirlinerFunction) comp;
                rePopulateTable.populateAirlineFlights();
            }
        }
        layout.previous(panel);
    }//GEN-LAST:event_btnBackAddFlightActionPerformed

    private void addFlightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFlightBtnActionPerformed

        boolean isFlightExist = false;

        dtm = (DefaultTableModel) flightSeatsTbl.getModel();
        int nRow = dtm.getRowCount();
        ArrayList<Seat> seatList = new ArrayList<>();
        boolean createFlight = false;
        if("".equals(flightNameTxt.getText())) {
            JOptionPane.showMessageDialog(null, "Flight name is mandatory");

        }else if("-- None --".equals(flightStatusCombo.getSelectedItem())) {
            JOptionPane.showMessageDialog(null, "Please select a status with respect to the flight");

        }else {

            for(Flight f : masterTravelSchedule.getMasterFlightList()) {
                if(flightNameTxt.getText().equalsIgnoreCase(f.getFlightName())) {
                    isFlightExist = true;
                    JOptionPane.showMessageDialog(null, "Flight with name \"" + f.getFlightName() + "\" already exist. Please enter a different name.");
                    break;
                }
            }

            if(!isFlightExist) {
                int count = 0;

                for(int i=0; i < nRow; i++) {

                    if(null == flightSeatsTbl.getValueAt(i, 0) || "".equals(flightSeatsTbl.getValueAt(i, 0))) {
                        JOptionPane.showMessageDialog(null, "Please enter seat number at row " + (i+1));
                        break;
                    }else if(null == flightSeatsTbl.getValueAt(i, 1) || "".equals(flightSeatsTbl.getValueAt(i, 1))) {
                        JOptionPane.showMessageDialog(null, "Please enter price for the seat at row " + (i+1));
                        break;
                    }
                    else if(0 >= (Double)flightSeatsTbl.getValueAt(i, 1)) {
                        JOptionPane.showMessageDialog(null, "Price for the seat cannot be less than or equals to 0 at row " + (i+1));
                        break;
                    }
                    else if(null == flightSeatsTbl.getValueAt(i, 2) || "".equals(flightSeatsTbl.getValueAt(i, 2))) {
                        JOptionPane.showMessageDialog(null, "Please select the seat type at row " + (i+1));
                        break;
                    }else if(null == flightSeatsTbl.getValueAt(i, 3)|| "".equals(flightSeatsTbl.getValueAt(i, 3))) {
                        JOptionPane.showMessageDialog(null, "Please select the availability of seat at row " + (i+1));
                        break;
                    }else {
                        count++;
                        createFlight = true;
                        Seat flightSeat = new Seat();
                        flightSeat.setSeatName(flightSeatsTbl.getValueAt(i, 0).toString());
                        flightSeat.setPrice((Double)flightSeatsTbl.getValueAt(i, 1));
                        flightSeat.setType(flightSeatsTbl.getValueAt(i, 2).toString());
                        flightSeat.setStatus(flightSeatsTbl.getValueAt(i, 3).toString());
                        seatList.add(flightSeat);
                    }
                }
                if(!checkForAirplaneOverlap() && count == nRow) {
                    Flight newFlight = new Flight();
                    newFlight.setFlightName(flightNameTxt.getText());
                    newFlight.setIsActive((flightStatusCombo.getSelectedItem() == "Active"));
                    newFlight.setAirliner(airliner);
                    newFlight.setFlightSchedule(selectedFlightSchedule);
                    newFlight.setAirplane(selectedAirplane);
                    newFlight.setFlightSeatList(seatList);

                    airliner.addFlight(newFlight);
                    masterTravelSchedule.addFLight(newFlight);
                    clearFields();
                    JOptionPane.showMessageDialog(null, "Flight is created successfully");
                }
            }

        }

        /*
        if(!checkForAirplaneOverlap()) {
            Flight newFlight = new Flight();
            newFlight.setFlightName(flightNameTxt.getText());
            newFlight.setIsActive((flightStatusCombo.getSelectedItem() == "Active"));
            newFlight.setAirliner(airliner);
            newFlight.setFlightSchedule(selectedFlightSchedule);
            newFlight.setAirplane(selectedAirplane);

            ArrayList<Seat> seatList = new ArrayList<>();
            dtm = (DefaultTableModel) flightSeatsTbl.getModel();
            int nRow = dtm.getRowCount();
            for(int i=0; i < nRow; i++) {
                Seat flightSeat = new Seat();
                flightSeat.setSeatName(flightSeatsTbl.getValueAt(i, 0).toString());
                flightSeat.setPrice((Double)flightSeatsTbl.getValueAt(i, 1));
                flightSeat.setType(flightSeatsTbl.getValueAt(i, 2).toString());
                flightSeat.setStatus(flightSeatsTbl.getValueAt(i, 3).toString());
                seatList.add(flightSeat);
            }
            newFlight.setFlightSeatList(seatList);

            airliner.addFlight(newFlight);
            masterTravelSchedule.addFLight(newFlight);
        }
        */
    }//GEN-LAST:event_addFlightBtnActionPerformed

    private void departureTimeTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departureTimeTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_departureTimeTxtActionPerformed

    private void arrivalDateTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrivalDateTxtActionPerformed

    }//GEN-LAST:event_arrivalDateTxtActionPerformed

    private void flightScheduleComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flightScheduleComboActionPerformed
        selectedFlightSchedule = (FlightSchedule)flightScheduleCombo.getSelectedItem();

        sourceTxt.setText(selectedFlightSchedule.getSource());
        destiationTxt.setText(selectedFlightSchedule.getDestination());
        arrivalDateTxt.setText((selectedFlightSchedule.getArrivalDate()).toString());
        arrivalTimeTxt.setText((selectedFlightSchedule.getArrivalTime()).toString());
        departureDateTxt.setText((selectedFlightSchedule.getDepartureDate()).toString());
        departureTimeTxt.setText((selectedFlightSchedule.getDepartureTime()).toString());
    }//GEN-LAST:event_flightScheduleComboActionPerformed

    private void flightAirplaneComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flightAirplaneComboActionPerformed
        selectedAirplane = (Airplane)flightAirplaneCombo.getSelectedItem();

        int totalSeats = (selectedAirplane.getSeatCol() * selectedAirplane.getSeatRow());
        dtm.setRowCount(totalSeats);
    }//GEN-LAST:event_flightAirplaneComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFlightBtn;
    private javax.swing.JTextField arrivalDateTxt;
    private javax.swing.JTextField arrivalTimeTxt;
    private javax.swing.JButton btnBackAddFlight;
    private javax.swing.JTextField departureDateTxt;
    private javax.swing.JTextField departureTimeTxt;
    private javax.swing.JTextField destiationTxt;
    private javax.swing.JComboBox<Airplane> flightAirplaneCombo;
    private javax.swing.JTextField flightNameTxt;
    private javax.swing.JComboBox<FlightSchedule> flightScheduleCombo;
    private javax.swing.JTable flightSeatsTbl;
    private javax.swing.JComboBox<String> flightStatusCombo;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField sourceTxt;
    // End of variables declaration//GEN-END:variables
}
