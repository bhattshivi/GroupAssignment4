/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageAirliner;

import Business.Airliner;
import Business.AirlinerDirectory;
import Business.Airplane;
import Business.AirplaneDirectory;
import Business.Flight;
import Business.MasterTravelSchedule;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mayank
 */
public class ManageAirplanes extends javax.swing.JPanel {
    
    private AirlinerDirectory airlineDirectory;
    private AirplaneDirectory airplaneDirectory;
    private Airliner airliner;
    private JPanel panel;
    private MasterTravelSchedule masterTravelSchedule;
    
    /**
     * Creates new form CreateAirplane
     */
    public ManageAirplanes(JPanel panel, AirlinerDirectory airlineDirectory, AirplaneDirectory airplaneDirectory, Airliner airliner, MasterTravelSchedule masterTravelSchedule) {
        initComponents();
        this.panel = panel;
        this.airlineDirectory = airlineDirectory;
        this.airplaneDirectory = airplaneDirectory;
        this.airliner = airliner;
        this.masterTravelSchedule = masterTravelSchedule;
        populateAiplaneTable();
    }
    
    public void populateAiplaneTable() {
        DefaultTableModel dtm = (DefaultTableModel)airplaneTbl.getModel();
        dtm.setRowCount(0);
        for(Airplane f : airliner.getAirplaneList()){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=f;
            row[1]=f.getSeatRow();
            row[2]=f.getSeatCol();
            row[3] = f.isIsActive() ? "Active" : "Inactive";
            dtm.addRow(row);
        }        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        airplaneTbl = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        addAirplaneBtn = new javax.swing.JButton();
        updateAirplaneBtn = new javax.swing.JButton();
        backAirplaneList = new javax.swing.JButton();

        setBackground(new java.awt.Color(174, 195, 195));
        setPreferredSize(new java.awt.Dimension(1040, 1020));
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        airplaneTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Airplane Name", "# of Rows", "# of Columns", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        airplaneTbl.setRowHeight(25);
        airplaneTbl.setRowMargin(3);
        jScrollPane1.setViewportView(airplaneTbl);
        if (airplaneTbl.getColumnModel().getColumnCount() > 0) {
            airplaneTbl.getColumnModel().getColumn(0).setResizable(false);
            airplaneTbl.getColumnModel().getColumn(1).setResizable(false);
            airplaneTbl.getColumnModel().getColumn(2).setResizable(false);
            airplaneTbl.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel4.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Airplanes List");

        addAirplaneBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/travel.png"))); // NOI18N
        addAirplaneBtn.setText(" Add Airplane");
        addAirplaneBtn.setToolTipText("");
        addAirplaneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAirplaneBtnActionPerformed(evt);
            }
        });

        updateAirplaneBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/change.png"))); // NOI18N
        updateAirplaneBtn.setText(" Update Airplane");
        updateAirplaneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAirplaneBtnActionPerformed(evt);
            }
        });

        backAirplaneList.setBackground(new java.awt.Color(174, 195, 195));
        backAirplaneList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-back-30.png"))); // NOI18N
        backAirplaneList.setText("Back");
        backAirplaneList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backAirplaneListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1016, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backAirplaneList)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(385, 385, 385)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addAirplaneBtn)
                .addGap(55, 55, 55)
                .addComponent(updateAirplaneBtn)
                .addGap(304, 304, 304))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backAirplaneList)
                .addGap(25, 25, 25)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addAirplaneBtn)
                    .addComponent(updateAirplaneBtn))
                .addGap(599, 599, 599))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addAirplaneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAirplaneBtnActionPerformed
        CreateAirplanes createAirplanePanel = new CreateAirplanes(this.panel, airlineDirectory, airplaneDirectory, airliner,masterTravelSchedule);
        this.panel.add(createAirplanePanel, "CreateAirplanes");
        CardLayout layout = (CardLayout)this.panel.getLayout();
        layout.next(panel);
    }//GEN-LAST:event_addAirplaneBtnActionPerformed

    private void updateAirplaneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAirplaneBtnActionPerformed
        
        int selectedRow = airplaneTbl.getSelectedRow();
        if(selectedRow>=0){
            Airplane airplane = (Airplane)airplaneTbl.getValueAt(selectedRow, 0);
            
            UpdateAirplane updateAirplanePanel = new UpdateAirplane(this.panel, airlineDirectory, airplaneDirectory, airliner, airplane,masterTravelSchedule);
            this.panel.add(updateAirplanePanel, "UpdateAirplane");
            CardLayout layout = (CardLayout)this.panel.getLayout();
            layout.next(panel);
        }else{
            JOptionPane.showMessageDialog(null, "Please select an Airplane");
        } 
        
        /*UpdateAirplane updateAirplanePanel = new UpdateAirplane(this.panel, airlineDirectory, airplaneDirectory, airliner);
        this.panel.add(updateAirplanePanel, "UpdateAirplane");
        CardLayout layout = (CardLayout)this.panel.getLayout();
        layout.next(panel);*/
    }//GEN-LAST:event_updateAirplaneBtnActionPerformed

    private void backAirplaneListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backAirplaneListActionPerformed
        // TODO add your handling code here
//        AirlinerFunction airLinerFunction = new AirlinerFunction(this.panel,  airlineDirectory,  airplaneDirectory,  airliner,  masterTravelSchedule);
//        this.panel.add(airLinerFunction, "AirlinerFunction");
//        CardLayout layout = (CardLayout)this.panel.getLayout();
////        layout.next(panel);
//        this.panel.remove(this);
//        CardLayout layout = (CardLayout) this.panel.getLayout();
//        layout.previous(panel);
             this.panel.remove(this);
        CardLayout layout = (CardLayout)this.panel.getLayout();
        Component[] comps = this.panel.getComponents();
        for (Component comp : comps){
            if(comp instanceof AirlinerFunction){
                AirlinerFunction rePopulateTable = (AirlinerFunction) comp;
                rePopulateTable.populateAirlineFlights();
            }
        }
        layout.previous(panel);
    }//GEN-LAST:event_backAirplaneListActionPerformed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
      
    }//GEN-LAST:event_formAncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAirplaneBtn;
    private javax.swing.JTable airplaneTbl;
    private javax.swing.JButton backAirplaneList;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton updateAirplaneBtn;
    // End of variables declaration//GEN-END:variables
}
