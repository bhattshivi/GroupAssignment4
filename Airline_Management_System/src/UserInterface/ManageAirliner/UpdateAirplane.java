/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.ManageAirliner;

import Business.Airliner;
import Business.AirlinerDirectory;
import Business.Airplane;
import Business.AirplaneDirectory;
import Business.Flight;
import Business.MasterTravelSchedule;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mayank
 */
public class UpdateAirplane extends javax.swing.JPanel {
    
    private AirlinerDirectory airlineDirectory;
    private AirplaneDirectory airplaneDirectory;
    private JPanel panel;
    DefaultTableModel dtm;
    private Airliner airliner;
    private Business.FlightSchedule f;
    private Airplane airplane;
    private MasterTravelSchedule masterTravelSchedule;
    
    /** Creates new form CreateAirplanes */
    public UpdateAirplane(JPanel panel, AirlinerDirectory airlineDirectory, AirplaneDirectory airplaneDirectory, Airliner airliner, Airplane airplane,MasterTravelSchedule masterTravelSchedule) {
        initComponents();
        this.panel = panel;
        this.airlineDirectory = airlineDirectory;
        this.airplaneDirectory = airplaneDirectory;
        this.airliner = airliner;
        this.airplane = airplane;
        this.masterTravelSchedule= masterTravelSchedule;
        populateAirplaneDetails();
    }
    
    public void populateAirplaneDetails() {
        airplaneName.setText(airplane.getAirplaneName());
        airplaneRows.setText(airplane.getSeatRow()+"");
        airplaneCol.setText(airplane.getSeatCol()+"");
        statusCombo.setSelectedItem(airplane.isIsActive() ? "Active" : "Inactive");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        airplaneName = new javax.swing.JTextField();
        airplaneRows = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        airplaneCol = new javax.swing.JTextField();
        updateAirplane = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        backUpdateAirplane = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        statusCombo = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(174, 195, 195));
        setPreferredSize(new java.awt.Dimension(1040, 1020));
        setRequestFocusEnabled(false);
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel1.setText("Airplane Name *");

        jLabel2.setText("# of Rows *");

        jLabel3.setText("# of Columns *");

        updateAirplane.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/change.png"))); // NOI18N
        updateAirplane.setText("Update");
        updateAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAirplaneActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        jLabel4.setText("Update Airplane");

        backUpdateAirplane.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-back-30.png"))); // NOI18N
        backUpdateAirplane.setText("Back");
        backUpdateAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backUpdateAirplaneActionPerformed(evt);
            }
        });

        jLabel5.setText("Status *");

        statusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Active", "Inactive" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 372, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(airplaneRows, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(37, 37, 37)
                            .addComponent(airplaneName, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel5))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(airplaneCol, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(statusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel4))
                .addGap(369, 369, 369))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(backUpdateAirplane))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(436, 436, 436)
                        .addComponent(updateAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(backUpdateAirplane)
                .addGap(35, 35, 35)
                .addComponent(jLabel4)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(airplaneName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(airplaneRows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(airplaneCol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(statusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addComponent(updateAirplane)
                .addContainerGap(497, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAirplaneActionPerformed
         
        boolean isAirplaneExist = false;
        
        if("".equals(airplaneName.getText())) {
            JOptionPane.showMessageDialog(null, "Airplane Name is mandatory");
            
        }else if("".equals(airplaneCol.getText())) {
            JOptionPane.showMessageDialog(null, "Airplane Seat Columns is mandatory");
            
        }else if("".equals(airplaneRows.getText())) {
            JOptionPane.showMessageDialog(null, "Airplane Seat Rows is mandatory");
            
        }else if("-- None --".equals(statusCombo.getSelectedItem())) {
            JOptionPane.showMessageDialog(null, "Airplane status is mandatory");
            
        }else {
            
            for(Airplane a : airliner.getAirplaneList()) {
                if(!(airplane.getAirplaneName().equalsIgnoreCase(a.getAirplaneName()))) {
                    if(airplaneName.getText().equalsIgnoreCase(a.getAirplaneName())) {
                        isAirplaneExist = true;
                        JOptionPane.showMessageDialog(null, "Airplane with name \"" + a.getAirplaneName() + "\" already exist. Please enter a different name.");
                        break;
                    }
                }
            }
            
            if(isAirplaneExist == false) {
                
                int seatCols = 0;
                try {
                    seatCols = Integer.parseInt(airplaneCol.getText());
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "Please enter a valid seat column number");
                    return;
                }

                int seatRows = 0;
                try{
                    seatRows = Integer.parseInt(airplaneRows.getText());
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "Please enter a valid seat row number");
                    return;
                }
                
                boolean updateA = true;
                for(Flight f : airliner.getFlightList()) {
                    if(f.getAirplane().equals(airplane) && f.isIsActive() && statusCombo.getSelectedItem().toString() == "Inactive") {
                        updateA = false;
                        JOptionPane.showMessageDialog(null, "Flight number " + f.getFlightName() + " is already contain this airplane and is active. Please cancel the flight first to inactive the airplane");
                        break;
                    }
                }
                if(updateA == true) {
                    airplane.setAirplaneName(airplaneName.getText());
                    airplane.setSeatCol(Integer.parseInt(airplaneCol.getText()));
                    airplane.setSeatRow(Integer.parseInt(airplaneRows.getText()));
                    airplane.setIsActive(statusCombo.getSelectedItem().toString() == "Active");
                    JOptionPane.showMessageDialog(null, "Airplane Updated Successfully");
                }
                 
            }
        }
    }//GEN-LAST:event_updateAirplaneActionPerformed

    private void backUpdateAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backUpdateAirplaneActionPerformed
        // TODO add your handling code here:
//        ManageAirplanes createAirplanePanel = new ManageAirplanes(this.panel,  airlineDirectory,  airplaneDirectory,  airliner,  masterTravelSchedule);
//        this.panel.add(createAirplanePanel, "CreateAirplane");
//        CardLayout layout = (CardLayout)this.panel.getLayout();
//        layout.next(panel);
       this.panel.remove(this);
        CardLayout layout = (CardLayout)this.panel.getLayout();
        Component[] comps = this.panel.getComponents();
        for (Component comp : comps){
            if(comp instanceof ManageAirplanes){
                ManageAirplanes rePopulateTable = (ManageAirplanes) comp;
                rePopulateTable.populateAiplaneTable();
            }
        }
        layout.previous(panel);
    }//GEN-LAST:event_backUpdateAirplaneActionPerformed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
       
    }//GEN-LAST:event_formAncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField airplaneCol;
    private javax.swing.JTextField airplaneName;
    private javax.swing.JTextField airplaneRows;
    private javax.swing.JButton backUpdateAirplane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JComboBox<String> statusCombo;
    private javax.swing.JButton updateAirplane;
    // End of variables declaration//GEN-END:variables

}
