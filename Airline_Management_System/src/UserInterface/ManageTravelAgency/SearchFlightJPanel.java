/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageTravelAgency;

import Business.Airliner;
import Business.AirlinerDirectory;
import Business.Flight;
import Business.MasterTravelSchedule;
import Business.Seat;
import java.awt.CardLayout;
import java.awt.Component;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shivibhatt
 */
public class SearchFlightJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchFlightJPanel
     */
    private JPanel panel;
    private AirlinerDirectory airlineDirectory;
    private MasterTravelSchedule masterTravelSchedule;
    private ArrayList<Flight> masterFlightList;
    private String searchTxtFlight;
    private String source;
    private String destination;

    public SearchFlightJPanel(JPanel panel, AirlinerDirectory airlineDirectory, MasterTravelSchedule masterTravelSchedule) {
        initComponents();
        this.panel = panel;
        this.airlineDirectory = airlineDirectory;
        this.masterTravelSchedule = masterTravelSchedule;
        populate();
        populateAirliner();
    }
    
    public void populateAirliner() {
        airlineCombo.addItem("-- None --");
        for(Airliner a : airlineDirectory.getAirlinerList()) {
            if(a.isIsActive()) {
                airlineCombo.addItem(a.getAirlinerName());
            }
        }
    }
    
    public void populate() {
        
        DefaultTableModel dtm = (DefaultTableModel) tblSearchFlight.getModel();
        dtm.setRowCount(0);
        for(Flight f : masterTravelSchedule.getMasterFlightList()) {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]= f;
            row[1]= f.getFlightName();
            row[2]= f.getAirliner();
            row[3]= f.getAirplane();
            row[4]= f.getFlightSchedule().getSource();
            row[5]= f.getFlightSchedule().getDestination();
            row[6]= f.getFlightSchedule().getDepartureDate() + "; " + f.getFlightSchedule().getDepartureTime();
            row[7]= f.getFlightSchedule().getArrivalDate() + "; " + f.getFlightSchedule().getArrivalTime();
            row[8]= (f.isIsActive()? "Active" : "Cancelled");
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchFlight = new javax.swing.JTable();
        bckSearchFlight = new javax.swing.JButton();
        btnBookFlight = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnSearchFlight = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        searchFlightNumber = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        sourceCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        destinationCombo = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        dDatePicker = new com.github.lgooddatepicker.components.DatePicker();
        jLabel14 = new javax.swing.JLabel();
        aDatePicker = new com.github.lgooddatepicker.components.DatePicker();
        jLabel8 = new javax.swing.JLabel();
        priceCombo = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        dDay = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        aDay = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        airlineCombo = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        flightStatus = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(174, 195, 195));
        setPreferredSize(new java.awt.Dimension(1040, 1020));

        tblSearchFlight.setBackground(new java.awt.Color(255, 237, 218));
        tblSearchFlight.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        tblSearchFlight.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight Id", "Flight #", "Airline", "Airplane", "Source", "Destination", "Departure Date & Time", "Arrival Date & Time", "Flight Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSearchFlight.setRowHeight(25);
        tblSearchFlight.setRowMargin(3);
        jScrollPane1.setViewportView(tblSearchFlight);
        if (tblSearchFlight.getColumnModel().getColumnCount() > 0) {
            tblSearchFlight.getColumnModel().getColumn(0).setResizable(false);
            tblSearchFlight.getColumnModel().getColumn(1).setResizable(false);
            tblSearchFlight.getColumnModel().getColumn(2).setResizable(false);
            tblSearchFlight.getColumnModel().getColumn(3).setResizable(false);
            tblSearchFlight.getColumnModel().getColumn(4).setResizable(false);
            tblSearchFlight.getColumnModel().getColumn(5).setResizable(false);
            tblSearchFlight.getColumnModel().getColumn(6).setResizable(false);
            tblSearchFlight.getColumnModel().getColumn(7).setResizable(false);
            tblSearchFlight.getColumnModel().getColumn(8).setResizable(false);
        }

        bckSearchFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-back-30.png"))); // NOI18N
        bckSearchFlight.setText("Back");
        bckSearchFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bckSearchFlightActionPerformed(evt);
            }
        });

        btnBookFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/reset.png"))); // NOI18N
        btnBookFlight.setText("Reset Search Filters");
        btnBookFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookFlightActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("View Flights");
        jLabel6.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N

        btnSearchFlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"))); // NOI18N
        btnSearchFlight.setText("Search Flight");
        btnSearchFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchFlightActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(174, 195, 195));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Flight Parameters"));

        jLabel2.setText("Flight Number");

        searchFlightNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFlightNumberActionPerformed(evt);
            }
        });

        jLabel3.setText("Source");

        sourceCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Boston", "San Francisco", "Dallas", "San Jose", "Seattle", "New York", "Las Vegas", "Los Angeles", "Chicago", "Miami" }));

        jLabel4.setText("Destination");

        destinationCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Boston", "San Francisco", "Dallas", "San Jose", "Seattle", "New York", "Las Vegas", "Los Angeles", "Chicago", "Miami" }));

        jLabel13.setText("Departure Date");

        jLabel14.setText("Arrival Date");

        jLabel8.setText("Price Range");

        priceCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "0 - 299", "300 - 599", "600 - 899", "900 - 1199", "1200 - 1499", "1500+" }));

        jLabel9.setText("Preferred Day of Departure Date");

        dDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Morning", "Afternoon", "Evening", "Night" }));

        jLabel11.setText("Preferred Day of Arrival Date");

        aDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Morning", "Afternoon", "Evening", "Night" }));

        jLabel10.setText("Airline");

        jLabel12.setText("Flight Status");

        flightStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- None --", "Active", "Cancelled" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(37, 37, 37)
                        .addComponent(priceCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sourceCombo, 0, 186, Short.MAX_VALUE)
                            .addComponent(searchFlightNumber)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(38, 38, 38)
                        .addComponent(aDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel4))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(destinationCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(dDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)))))
                .addGap(115, 115, 115)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(dDay, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(airlineCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(aDay, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(132, 132, 132)
                        .addComponent(flightStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(220, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchFlightNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destinationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(airlineCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flightStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(btnSearchFlight)
                .addGap(107, 107, 107)
                .addComponent(btnBookFlight)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(bckSearchFlight))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(392, 392, 392)
                                .addComponent(jLabel6)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bckSearchFlight)
                .addGap(9, 9, 9)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchFlight)
                    .addComponent(btnBookFlight))
                .addContainerGap(190, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bckSearchFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bckSearchFlightActionPerformed
        // TODO add your handling code here:

        /*ManageTravelAgency manageTravelAgency = new ManageTravelAgency(this.panel, airlineDirectory);
>>>>>>> 0af4737f3e375b9e85ba6c7f8548bb2cfbc992f0
        this.panel.add(manageTravelAgency, "ManageTravelAgency");
        CardLayout layout = (CardLayout)this.panel.getLayout();
        layout.next(panel);*/
          this.panel.remove(this);
        CardLayout layout = (CardLayout)this.panel.getLayout();
        Component[] comps = this.panel.getComponents();
        for (Component comp : comps){
            if(comp instanceof ManageTravelAgency){
                ManageTravelAgency rePopulateTable = (ManageTravelAgency) comp;
                //rePopulateTable.populate();
            }
        }
        layout.previous(panel);
    }//GEN-LAST:event_bckSearchFlightActionPerformed

    private void btnBookFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookFlightActionPerformed
        searchFlightNumber.setText("");
        sourceCombo.setSelectedItem("-- None --");
        destinationCombo.setSelectedItem("-- None --");
        priceCombo.setSelectedItem("-- None --");
        dDay.setSelectedItem("-- None --");
        aDay.setSelectedItem("-- None --");
        airlineCombo.setSelectedItem("-- None --");
        flightStatus.setSelectedItem("-- None --");
        dDatePicker.setText("");
        aDatePicker.setText("");
        
        populate();
    }//GEN-LAST:event_btnBookFlightActionPerformed

    private void searchFlightNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFlightNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFlightNumberActionPerformed

    private void btnSearchFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchFlightActionPerformed
        // TODO add your handling code here:
        //Flight Number
        
        int notBlankCount = 0;
        String fNum, sourceCity, destCity, price, depDay, arrDay, fStatus = "";
        
        fNum = searchFlightNumber.getText();
        sourceCity = sourceCombo.getSelectedItem().toString();
        destCity = destinationCombo.getSelectedItem().toString();
        //LocalDate aDate1 = null;
        //LocalDate dDate1 = null;
        price = priceCombo.getSelectedItem().toString();
        depDay = dDay.getSelectedItem().toString();
        arrDay = aDay.getSelectedItem().toString();
        String airlineName = airlineCombo.getSelectedItem().toString();
        fStatus = flightStatus.getSelectedItem().toString();
        
        if(!("".equals(fNum))) {
            System.out.println("INSIDE1>>>>");
            notBlankCount++;
        }
        if(!("-- None --".equals(sourceCity))) {
            System.out.println("INSIDE2>>>>");
            notBlankCount++;
        }
        if(!("-- None --".equals(destCity))) {
            System.out.println("INSIDE3>>>>");
            notBlankCount++;
        }
        
        /*if("".equals(dDatePicker.getText())) {
            JOptionPane.showMessageDialog(null, "Departure date and time is mandatory");
            
        }
        if("".equals(aDatePicker.getText())) {
            JOptionPane.showMessageDialog(null, "Arrival date and time is mandatory");
            
        }*/
        
        /*if(!("".equals(dDate.getText()))) {
            
            try{
                dDate1 = LocalDate.parse(dDate.getText());
                System.out.println("INSIDE4>>>>");
                notBlankCount++;
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Departure date in YYYY-MM-DD format");
                return;
            } 
        }
        if(!("".equals(aDate.getText()))) {
            
            try{
                aDate1 = LocalDate.parse(aDate.getText());
                System.out.println("INSIDE5>>>>");
                notBlankCount++;
            }catch(DateTimeParseException e){
                JOptionPane.showMessageDialog(null, "Please enter a valid Arrival date in YYYY-MM-DD format");
                return;
            } 
        }
        */
        if(!("-- None --".equals(priceCombo.getSelectedItem().toString()))) {
            System.out.println("INSIDE6>>>>");
            notBlankCount++;
        }
        if(!("-- None --".equals(dDay.getSelectedItem().toString()))) {
            System.out.println("INSIDE7>>>>");
            notBlankCount++;
        }
        if(!("-- None --".equals(aDay.getSelectedItem().toString()))) {
            System.out.println("INSIDE8>>>>");
            notBlankCount++;
        }
        if(!("-- None --".equals(airlineCombo.getSelectedItem().toString()))) {
            System.out.println("INSIDE9>>>>");
            notBlankCount++;
        }
        if(!("-- None --".equals(flightStatus.getSelectedItem().toString()))) {
            System.out.println("INSIDE10>>>>");
            notBlankCount++;
        }
        if(!("".equals(aDatePicker.getText()))) {
            System.out.println("INSIDE10>>>>");
            notBlankCount++;
        }
        if(!("".equals(dDatePicker.getText()))) {
            System.out.println("INSIDE10>>>>");
            notBlankCount++;
        }
        
        
        
        

        
        
        System.out.println("COUNT1 >>>> " + notBlankCount);
        System.out.println("MMMM1 >>>> " + fNum);
        System.out.println("MMMM1 >>>> " + sourceCity);
        System.out.println("MMMM1 >>>> " + destCity);
        //System.out.println("MMMM1 >>>> " + dDate1);
        //System.out.println("MMMM1 >>>> " + aDate1);
        System.out.println("MMMM1 >>>> " + price);
        System.out.println("MMMM1 >>>> " + depDay);
        System.out.println("MMMM1 >>>> " + arrDay);
        System.out.println("MMMM1 >>>> " + airlineName);
        System.out.println("MMMM1 >>>> " + fStatus);
        
        
        //masterFlightList = masterTravelSchedule.searchFlight(fNum, sourceCity, destCity, dDate1, aDate1, price, depDay, arrDay, airlineName, fStatus, notBlankCount);
        masterFlightList = masterTravelSchedule.searchFlight(fNum, sourceCity, destCity, dDatePicker.getDate(), aDatePicker.getDate(), price, depDay, arrDay, airlineName, fStatus, notBlankCount);
        
        DefaultTableModel dtm = (DefaultTableModel) tblSearchFlight.getModel();
        dtm.setRowCount(0);
        for (Flight f : masterFlightList) {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]= f;
            row[1]= f.getFlightName();
            row[2]= f.getAirliner();
            row[3]= f.getAirplane();
            row[4]= f.getFlightSchedule().getSource();
            row[5]= f.getFlightSchedule().getDestination();
            row[6]= f.getFlightSchedule().getDepartureDate() + "; " + f.getFlightSchedule().getDepartureTime();
            row[7]= f.getFlightSchedule().getArrivalDate() + "; " + f.getFlightSchedule().getArrivalTime();
            row[8]= (f.isIsActive()? "Active" : "Cancelled");
            dtm.addRow(row);
        }
        
        /*
         searchTxtFlight = searchFlightNumber.getText();
         source = searchSourceLocation.getText();
         destination = searchDestinationLocation.getText();
        if (searchTxtFlight.isEmpty() && source.isEmpty() && destination.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All Fields cannnot be Blank", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } 

        masterFlightList = masterTravelSchedule.searchFlight(searchTxtFlight, source, destination);

        ///populate();
        if (masterFlightList == null) {
            JOptionPane.showMessageDialog(null, "Flight Number, Source, Destination Name You Entered Does Not Exist", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            populateSearch();
        }
        */
    }//GEN-LAST:event_btnSearchFlightActionPerformed
    private void populateSearch() {
        /*DefaultTableModel dtm = (DefaultTableModel) tblSearchFlight.getModel();
        dtm.setRowCount(0);
        for (Flight f : masterTravelSchedule.searchFlight(searchTxtFlight, source, destination)) {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = f;
            row[1] = f.getFlightSchedule().getSource();
            row[2] = f.getFlightSchedule().getDestination();
            dtm.addRow(row);
          
//            System.out.println("===>> " + f.getFlightSchedule().getArrivalDate());
//            System.out.println("===>> " + f.getFlightSchedule().getArrivalTime());
//            System.out.println("===>> " + f.getFlightSchedule().getDepartureDate());
//            System.out.println("===>> " + f.getFlightSchedule().getDepartureTime());
//            System.out.println("===>> " + f.getAirliner().getAirlinerName());
//            System.out.println("===>> " + f.getAirplane().getAirplaneName());
//            for(Seat s : f.getFlightSeatList()) {
//                System.out.println("===>> " + s.getSeatName());
//                System.out.println("===>> " + s.getStatus());
//                System.out.println("===>> " + s.getPrice());
//                System.out.println("===>> " + s.getType());
//            }
        }
          System.out.println("---------SEARCHED FLIGHTS------------");
          System.out.println("===>> SEARCHED FLIGHT" + masterTravelSchedule.searchFlight(searchTxtFlight, source, destination));
           */

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DatePicker aDatePicker;
    private javax.swing.JComboBox<String> aDay;
    private javax.swing.JComboBox<String> airlineCombo;
    private javax.swing.JButton bckSearchFlight;
    private javax.swing.JButton btnBookFlight;
    private javax.swing.JButton btnSearchFlight;
    private com.github.lgooddatepicker.components.DatePicker dDatePicker;
    private javax.swing.JComboBox<String> dDay;
    private javax.swing.JComboBox<String> destinationCombo;
    private javax.swing.JComboBox<String> flightStatus;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> priceCombo;
    private javax.swing.JTextField searchFlightNumber;
    private javax.swing.JComboBox<String> sourceCombo;
    private javax.swing.JTable tblSearchFlight;
    // End of variables declaration//GEN-END:variables
}
